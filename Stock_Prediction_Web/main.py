import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.colors
from datetime import date, timedelta

# Import c√°c module ƒë√£ t√°ch ri√™ng
from data_handler import (
    load_historical_data, 
    get_stock_info, 
    get_filtered_data,
    get_stock_statistics,
    get_company_details,
    calculate_price_change,
    get_premarket_info
)

from lstm import Predict
from linear import LinearStockPredictor
from prophet_model import ProphetPredictor
# --- THI·∫æT L·∫¨P TRANG V√Ä TR·∫†NG TH√ÅI ---
st.markdown(
    """
    <div style='text-align: center; margin-top: -60px; margin-bottom: 5px; background-color: transparent ; padding: 10px 0;'>
        <h1 style='font-size: 36px; color: #FF4B4B; font-family: "Segoe UI", "Roboto", "Arial", sans-serif; font-weight: 700; letter-spacing: 1px;'>
             STOCK WISE - C·ªï Phi·∫øu Th√¥ng Minh
        </h1>
        
    </div>
    """,
    unsafe_allow_html=True
)


# Kh·ªüi t·∫°o session state
if 'selected_stock' not in st.session_state:
    st.session_state.selected_stock = None
if 'time_range' not in st.session_state:
    st.session_state.time_range = "1 nƒÉm"
if 'comparison_stocks' not in st.session_state:
    st.session_state.comparison_stocks = []
if 'comparison_page' not in st.session_state:
    st.session_state.comparison_page = 0
if 'prediction_results' not in st.session_state:
    st.session_state.prediction_results = None
if 'prediction_time_range' not in st.session_state:
    st.session_state.prediction_time_range = "T·ªêI ƒêA"

# --- C√ÅC H√ÄM V·∫º BI·ªÇU ƒê·ªí ---

def plot_single_stock(data_to_plot):
    """V·∫Ω bi·ªÉu ƒë·ªì chu·ªói th·ªùi gian cho m·ªôt c·ªï phi·∫øu."""
    fig = go.Figure()
    
    # X√°c ƒë·ªãnh m√†u s·∫Øc d·ª±a tr√™n xu h∆∞·ªõng
    line_color = 'limegreen' if not data_to_plot.empty and data_to_plot['Close'].iloc[-1] >= data_to_plot['Close'].iloc[0] else 'tomato'
    fill_color = 'rgba(152, 251, 152, 0.1)' if line_color == 'limegreen' else 'rgba(255, 99, 71, 0.1)'
    
    fig.add_trace(go.Scatter(
        x=data_to_plot['Date'],
        y=data_to_plot['Close'],
        name='Gi√° ƒê√≥ng c·ª≠a',
        line=dict(color=line_color, width=2),
        fill='tozeroy',
        fillcolor=fill_color
    ))
    
    fig.update_layout(
        title=None, 
        xaxis_title=None, 
        yaxis_title="Gi√° (USD)",
        xaxis_rangeslider_visible=False, 
        margin=dict(l=0, r=0, t=20, b=0), 
        showlegend=False
    )
    
    st.plotly_chart(fig, use_container_width=True)


def plot_comparison(main_ticker, main_data, comparison_tickers, start_date, end_date):
    """V·∫Ω bi·ªÉu ƒë·ªì so s√°nh hi·ªáu su·∫•t c·ªßa nhi·ªÅu c·ªï phi·∫øu."""
    fig = go.Figure()
    all_tickers = [main_ticker] + comparison_tickers
    all_data = {main_ticker: main_data}
    colors = plotly.colors.qualitative.Plotly
    
    # T·∫£i d·ªØ li·ªáu cho c√°c c·ªï phi·∫øu so s√°nh
    for ticker in comparison_tickers:
        all_data[ticker] = load_historical_data(ticker)
    
    # V·∫Ω bi·ªÉu ƒë·ªì cho t·ª´ng c·ªï phi·∫øu
    for i, ticker in enumerate(all_tickers):
        df = all_data.get(ticker)
        if df is None: 
            continue
        
        # L·ªçc d·ªØ li·ªáu theo th·ªùi gian
        mask = (df['Date'] >= pd.to_datetime(start_date)) & (df['Date'] <= pd.to_datetime(end_date))
        filtered_df = df.loc[mask]
        
        if not filtered_df.empty:
            initial_price = filtered_df['Close'].iloc[0]
            pct_change = ((filtered_df['Close'] / initial_price) - 1) * 100
            fig.add_trace(go.Scatter(
                x=filtered_df['Date'], 
                y=pct_change, 
                name=ticker, 
                line=dict(color=colors[i % len(colors)])
            ))
    
    fig.update_layout(
        title=None, 
        xaxis_title=None, 
        yaxis_title="Thay ƒë·ªïi (%)",
        xaxis_rangeslider_visible=False, 
        margin=dict(l=0, r=0, t=20, b=0),
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
    )
    
    st.plotly_chart(fig, use_container_width=True)
    return all_data


# --- C√ÅC H√ÄM HI·ªÇN TH·ªä GIAO DI·ªÜN ---

def display_comparison_legend(all_data, start_date, end_date):
    """Hi·ªÉn th·ªã ch√∫ th√≠ch v√† th√¥ng tin chi ti·∫øt cho bi·ªÉu ƒë·ªì so s√°nh."""
    st.markdown("---")
    colors = plotly.colors.qualitative.Plotly
    
    for i, (ticker, df) in enumerate(all_data.items()):
        if df is None: 
            continue
        
        # L·ªçc d·ªØ li·ªáu theo th·ªùi gian
        mask = (df['Date'] >= pd.to_datetime(start_date)) & (df['Date'] <= pd.to_datetime(end_date))
        filtered_df = df.loc[mask]
        
        if not filtered_df.empty:
            initial_price = filtered_df['Close'].iloc[0]
            final_price = filtered_df['Close'].iloc[-1]
            abs_change = final_price - initial_price
            pct_change = (abs_change / initial_price) * 100
            
            color = colors[i % len(colors)]
            change_color = "limegreen" if pct_change >= 0 else "tomato"
            change_icon = "üîº" if pct_change >= 0 else "üîΩ"
            
            cols = st.columns([0.5, 2, 2, 2, 2, 1])
            with cols[0]:
                st.markdown(f'<div style="width: 10px; height: 20px; background-color: {color};"></div>', unsafe_allow_html=True)
            with cols[1]:
                st.markdown(f"**{ticker}**")
            with cols[2]:
                st.markdown(f"{final_price:.2f} $")
            with cols[3]:
                st.markdown(f"<span style='color:{change_color}'>{abs_change:+.2f} $</span>", unsafe_allow_html=True)
            with cols[4]:
                st.markdown(f"<span style='color:{change_color}'>{change_icon} {pct_change:+.2f}%</span>",
                            unsafe_allow_html=True)
            with cols[5]:
                if ticker != st.session_state.selected_stock:
                    if st.button("‚úï", key=f"remove_{ticker}"):
                        st.session_state.comparison_stocks.remove(ticker)
                        st.rerun()

def display_stock_info_card(info):
    """Hi·ªÉn th·ªã th·∫ª th√¥ng tin chi ti·∫øt c·ªßa c·ªï phi·∫øu."""
    st.subheader("Th·ªëng k√™")

    def format_large_number(num):
        if num is None or num == 0: return "N/A"
        if num > 1_000_000_000_000: return f"{num / 1_000_000_000_000:.2f} NT"
        if num > 1_000_000_000: return f"{num / 1_000_000_000:.2f} T·ª∑"
        if num > 1_000_000: return f"{num / 1_000_000:.2f} Tr"
        return f"{num:,}"

    html_string = """<style>.info-card table{width:100%;border-collapse:collapse;}.info-card td{padding:8px 5px;border-bottom:1px solid #31333F;font-size:14px;}.info-card .label{color:#A0A0A0;text-align:left;}.info-card .value{color:#FAFAFA;text-align:right;font-weight:600;}</style><div class="info-card"><table>"""
    info_rows = {
        "Gi√° ƒë√≥ng c·ª≠a h√¥m tr∆∞·ªõc": f"{info.get('previousClose'):.2f} $" if info.get('previousClose') else "N/A",
        "M·ª©c ch√™nh l·ªách m·ªôt ng√†y": f"{info.get('dayLow'):.2f} - {info.get('dayHigh'):.2f} $" if info.get(
            'dayLow') and info.get('dayHigh') else "N/A",
        "Ph·∫°m vi m·ªôt nƒÉm": f"{info.get('fiftyTwoWeekLow'):.2f} - {info.get('fiftyTwoWeekHigh'):.2f} $" if info.get(
            'fiftyTwoWeekLow') and info.get('fiftyTwoWeekHigh') else "N/A",
        "Gi√° tr·ªã v·ªën h√≥a": f"{format_large_number(info.get('marketCap'))} USD",
        "KL giao d·ªãch TB": format_large_number(info.get('averageVolume')),
        "T·ª∑ s·ªë P/E": f"{info.get('trailingPE'):.2f}" if info.get('trailingPE') else "N/A",
        "T·ª∑ l·ªá c·ªï t·ª©c": f"{info.get('dividendYield', 0) * 100:.2f}%" if info.get('dividendYield') else "N/A",
        "S√†n giao d·ªãch": info.get('exchange', "N/A")
    }
    for label, value in info_rows.items():
        html_string += f'<tr><td class="label">{label}</td><td class="value">{value}</td></tr>'
    html_string += "</table></div>"
    st.markdown(html_string, unsafe_allow_html=True)


def display_about_section(info):
    """Hi·ªÉn th·ªã ph·∫ßn gi·ªõi thi·ªáu ng·∫Øn v√† th√¥ng tin chi ti·∫øt v·ªÅ c√¥ng ty."""
    st.subheader("Gi·ªõi thi·ªáu")
    summary = info.get('longBusinessSummary')
    if summary:
        st.markdown(f"""
        <div style="text-align: justify; font-size: 14px; color: #A0A0A0;">
            {summary[:400]}... 
            <a href="https://vi.wikipedia.org/wiki/{info.get('shortName', '').replace(' ', '_')}" target="_blank">Wikipedia</a>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.info("Kh√¥ng c√≥ th√¥ng tin gi·ªõi thi·ªáu cho m√£ n√†y.")

    st.write("")

    ceo_name = "N/A"
    if info.get('companyOfficers'):
        for officer in info['companyOfficers']:
            if 'ceo' in officer.get('title', '').lower():
                ceo_name = officer.get('name', 'N/A')
                break

    address = f"{info.get('city', '')}, {info.get('state', '')}, {info.get('country', '')}".strip(", ")
    website = info.get('website', 'N/A')
    employees = f"{info.get('fullTimeEmployees'):,}" if info.get('fullTimeEmployees') else "N/A"

    html_string = """<style>.about-card table{width:100%;border-collapse:collapse;}.about-card td{padding:8px 5px;border-bottom:1px solid #31333F;font-size:14px;}.about-card .label{color:#A0A0A0;text-align:left;}.about-card .value{color:#FAFAFA;text-align:right;font-weight:600;}</style><div class="about-card"><table>"""
    about_rows = {
        "üë§ Gi√°m ƒë·ªëc ƒëi·ªÅu h√†nh": ceo_name,
        "üìç Tr·ª• s·ªü ch√≠nh": address,
        "üåê Trang web": f"<a href='http://{website}' target='_blank'>{website}</a>",
        "üë• Nh√¢n vi√™n": employees
    }
    for label, value in about_rows.items():
        html_string += f'<tr><td class="label">{label}</td><td class="value">{value}</td></tr>'
    html_string += "</table></div>"
    st.markdown(html_string, unsafe_allow_html=True)


def display_main_header(info, data, time_range_label, start_date_value):
    """Hi·ªÉn th·ªã ph·∫ßn header ch√≠nh v·ªõi gi√° v√† thay ƒë·ªïi theo b·ªô l·ªçc th·ªùi gian."""
    stock_name = info.get('longName', info.get('shortName', ''))
    if stock_name:
        st.markdown(f"<h2 style='font-weight: 600; margin-bottom: 5px;'>{stock_name}</h2>", unsafe_allow_html=True)
        st.divider()

    price = info.get('currentPrice', info.get('regularMarketPrice', 0))

    change = 0
    change_pct = 0

    if data is not None and not data.empty:
        period_data = data[data['Date'] >= pd.to_datetime(start_date_value)]
        if len(period_data) > 1:
            start_price = period_data['Close'].iloc[0]
            end_price = period_data['Close'].iloc[-1]
            change = end_price - start_price
            change_pct = (change / start_price) if start_price != 0 else 0

    color = "limegreen" if change >= 0 else "tomato"
    change_sign = "+" if change >= 0 else ""
    icon = "üîº" if change >= 0 else "üîΩ"

    st.markdown(f"""
    <div style="display: flex; align-items: baseline; gap: 15px; margin-bottom: 5px;">
        <span style="font-size: 48px; font-weight: bold;">{price:.2f} $</span>
        <span style="font-size: 24px; color: {color}; font-weight: bold;">{icon} {change_pct * 100:.2f}%</span>
        <span style="font-size: 16px; color: {color};">{change_sign}{change:.2f} {time_range_label}</span>
    </div>
    """, unsafe_allow_html=True)

    pre_price = info.get('preMarketPrice')
    if pre_price:
        pre_change = info.get('preMarketChange', 0)
        pre_change_pct = info.get('preMarketChangePercent', 0)
        pre_color = "limegreen" if pre_change >= 0 else "tomato"
        pre_change_icon = "üîº" if pre_change >= 0 else "üîΩ"

        st.markdown(f"""
        <div style="font-size: 14px; color: #A0A0A0;">
            <span>Tr∆∞·ªõc gi·ªù m·ªü c·ª≠a: </span>
            <span style="color: #FAFAFA; font-weight: 600;">{pre_price:.2f} $</span>
            <span style="color: {pre_color};"> ({pre_change_icon} {pre_change:+.2f} {pre_change_pct * 100:+.2f}%)</span>
        </div>
        """, unsafe_allow_html=True)
    st.write("")


def plot_prediction_results(historical_data, prediction_results, time_range_label="1 th√°ng"):
    fig = go.Figure()
    """V·∫Ω bi·ªÉu ƒë·ªì d·ª± ƒëo√°n gi√° c·ªï phi·∫øu."""
    # 1. L·ªçc theo th·ªùi gian
    today = date.today()
    if time_range_label == "1 ng√†y":
        start_date_filter = today - timedelta(days=2)
    elif time_range_label == "5 ng√†y":
        start_date_filter = today - timedelta(days=7)
    elif time_range_label == "1 th√°ng":
        start_date_filter = today - timedelta(days=31)
    elif time_range_label == "6 th√°ng":
        start_date_filter = today - timedelta(days=183)
    elif time_range_label == "T·ª´ ƒë·∫ßu nƒÉm":
        start_date_filter = date(today.year, 1, 1)
    elif time_range_label == "1 nƒÉm":
        start_date_filter = today - timedelta(days=366)
    elif time_range_label == "5 nƒÉm":
        start_date_filter = today - timedelta(days=5 * 366)
    else:
        start_date_filter = historical_data['Date'].min()

    # 2. L·ªãch s·ª≠
    hist_filtered = historical_data[historical_data['Date'] >= pd.to_datetime(start_date_filter)]
    fig.add_trace(go.Scatter(
        x=hist_filtered['Date'],
        y=hist_filtered['Close'],
        mode='lines',
        name='D·ªØ li·ªáu L·ªãch s·ª≠',
        line=dict(color='gray')
    ))

    # 3. D·ª± ƒëo√°n
    colors = plotly.colors.qualitative.Vivid
    for i, (model_name, pred_df) in enumerate(prediction_results.items()):
        pred_filtered = pred_df[pred_df['Date'] >= pd.to_datetime(start_date_filter)]

        if not pred_filtered.empty:
            # ‚úÖ Th√™m ƒëi·ªÉm cu·ªëi c·ªßa d·ªØ li·ªáu l·ªãch s·ª≠ v√†o ƒë·∫ßu d·ª± ƒëo√°n
            last_hist_date = historical_data['Date'].max()
            last_hist_price = historical_data.loc[historical_data['Date'] == last_hist_date, 'Close'].values[0]

            # N·ªëi 1 ƒëi·ªÉm b·∫±ng c√°ch th√™m v√†o ƒë·∫ßu prediction
            pred_filtered = pd.concat([
                pd.DataFrame({'Date': [last_hist_date], 'Prediction': [last_hist_price]}),
                pred_filtered
            ], ignore_index=True)

            fig.add_trace(go.Scatter(
                x=pred_filtered['Date'],
                y=pred_filtered['Prediction'],
                mode='lines',
                name=f'D·ª± ƒëo√°n ({model_name})',
                line=dict(color=colors[i % len(colors)], dash='dash')
            ))

    # 4. Layout
    fig.update_layout(
        title="Bi·ªÉu ƒë·ªì D·ª± ƒëo√°n Gi√° C·ªï phi·∫øu",
        xaxis_title="Ng√†y",
        yaxis_title="Gi√° (USD)",
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
        template='plotly_dark',
        height=450,
        margin=dict(t=40, b=30, l=10, r=10)
    )

    st.plotly_chart(fig, use_container_width=True)



# --- GIAO DI·ªÜN CH√çNH C·ª¶A ·ª®NG D·ª§NG ---
import streamlit as st
from datetime import date, timedelta
import pandas as pd

# ƒê·∫∑t c·∫•u h√¨nh Streamlit
st.set_page_config(page_title="Stock Forecasting Dashboard", layout="wide")
st.set_page_config(layout="wide")

# CSS ƒë·ªÉ m·ªói tab chi·∫øm 33% chi·ªÅu ngang
st.markdown("""
    <style>
    /* Chia ƒë·ªÅu chi·ªÅu r·ªông c√°c tab - m·ªói tab chi·∫øm 33% */
    .stTabs [data-baseweb="tab"] {
        flex: 1 1 33%;
        justify-content: center;  /* CƒÉn gi·ªØa ch·ªØ trong tab */
    }

    /* TƒÉng c·ª° ch·ªØ tab n·∫øu c·∫ßn */
    .stTabs [data-baseweb="tab"] button {
        font-size: 18px !important;
        font-weight: 600;
        color: #1f2937;
    }
    </style>
""", unsafe_allow_html=True)

tab1, tab2 = st.tabs([
    "PH√ÇN T√çCH & D·ª∞ B√ÅO XU H∆Ø·ªöNG GI√Å ƒê√ìNG C·ª¨A C·ª¶A C·ªî PHI·∫æU",
    "CHATBOT H·ªñ TR·ª¢ PH√ÇN T√çCH D·ªÆ LI·ªÜU"
])


with tab1:
    st.header("1. Ch·ªçn m·ªôt m√£ c·ªï phi·∫øu")
    stocks = ("AAPL", "GOOG", "MSFT", "AMZN", "META", "TSLA", "NVDA", "AMD", "INTC", "IBM")


    def handle_stock_selection(stock):
        st.session_state.selected_stock = stock
        st.session_state.time_range = "1 nƒÉm"
        st.session_state.comparison_stocks = []
        st.session_state.comparison_page = 0
        st.session_state.prediction_results = None


    N_COLS = 5
    cols = st.columns(N_COLS)
    for i, stock_ticker in enumerate(stocks):
        with cols[i % N_COLS]:
            is_selected = (stock_ticker == st.session_state.selected_stock)
            button_type = "primary" if is_selected else "secondary"
            st.button(stock_ticker, key=f"select_{stock_ticker}", on_click=handle_stock_selection, args=(stock_ticker,),
                    use_container_width=True, type=button_type)

    if st.session_state.selected_stock:
        selected_stock = st.session_state.selected_stock

        historical_data = load_historical_data(selected_stock)
        stock_info = get_stock_info(selected_stock)

        st.write("---")

        main_col, stats_col = st.columns([2.5, 1])

        with main_col:
            if historical_data is not None and not historical_data.empty:
                today = date.today()
                min_available_date = historical_data['Date'].min().date()

                if st.session_state.time_range == "1 ng√†y":
                    start_date_value = today - timedelta(days=2)
                elif st.session_state.time_range == "5 ng√†y":
                    start_date_value = today - timedelta(days=7)
                elif st.session_state.time_range == "1 th√°ng":
                    start_date_value = today - timedelta(days=31)
                elif st.session_state.time_range == "6 th√°ng":
                    start_date_value = today - timedelta(days=183)
                elif st.session_state.time_range == "T·ª´ ƒë·∫ßu nƒÉm":
                    start_date_value = date(today.year, 1, 1)
                elif st.session_state.time_range == "1 nƒÉm":
                    start_date_value = today - timedelta(days=366)
                elif st.session_state.time_range == "5 nƒÉm":
                    start_date_value = today - timedelta(days=5 * 366)
                else:
                    start_date_value = min_available_date

                if start_date_value < min_available_date:
                    start_date_value = min_available_date

                if stock_info:
                    display_main_header(stock_info, historical_data, st.session_state.time_range, start_date_value)
                else:
                    st.header(f"Ph√¢n t√≠ch l·ªãch s·ª≠ gi√° c·ªßa {selected_stock}")

                time_ranges = ["1 ng√†y", "5 ng√†y", "1 th√°ng", "6 th√°ng", "T·ª´ ƒë·∫ßu nƒÉm", "1 nƒÉm", "5 nƒÉm", "T·ªêI ƒêA"]
                st.radio("Ch·ªçn nhanh kho·∫£ng th·ªùi gian", options=time_ranges, key='time_range', horizontal=True,
                        label_visibility="collapsed")

                if st.session_state.comparison_stocks:
                    comparison_data = plot_comparison(selected_stock, historical_data, st.session_state.comparison_stocks,
                                                    start_date_value, today)
                    display_comparison_legend(comparison_data, start_date_value, today)
                else:
                    filtered_data = historical_data[historical_data['Date'] >= pd.to_datetime(start_date_value)]
                    plot_single_stock(filtered_data)

                st.write("---")
                st.subheader("So s√°nh v·ªõi")

                stocks_to_compare = [s for s in stocks if
                                    s != selected_stock and s not in st.session_state.comparison_stocks]

                if not stocks_to_compare:
                    st.info("ƒê√£ th√™m t·∫•t c·∫£ c√°c m√£ c√≥ s·∫µn ƒë·ªÉ so s√°nh.")
                else:
                    items_per_page = 5
                    start_idx = st.session_state.comparison_page * items_per_page
                    stocks_on_page = stocks_to_compare[start_idx: start_idx + items_per_page]

                    compare_cols = st.columns(items_per_page + 1)
                    for i, ticker in enumerate(stocks_on_page):
                        with compare_cols[i]:
                            if st.button(ticker, key=f"compare_{ticker}", use_container_width=True):
                                st.session_state.comparison_stocks.append(ticker)
                                st.rerun()

                    with compare_cols[items_per_page]:
                        if st.button("‚ñ∂", key="next_page"):
                            st.session_state.comparison_page += 1
                            total_pages = (len(stocks_to_compare) + items_per_page - 1) // items_per_page
                            if st.session_state.comparison_page >= total_pages:
                                st.session_state.comparison_page = 0
                            st.rerun()

            else:
                st.error(f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠ cho {selected_stock}.")

        with stats_col:
            if stock_info:
                display_stock_info_card(stock_info)
                st.write("---")
                display_about_section(stock_info)
            else:
                st.warning(f"Kh√¥ng th·ªÉ t·∫£i th√¥ng tin chi ti·∫øt cho {selected_stock}.")

        if 'filtered_data' in locals() and not filtered_data.empty and not st.session_state.comparison_stocks:
            filtered_data = filtered_data.sort_values(by="Date", ascending=False)
            st.subheader("B·∫£ng d·ªØ li·ªáu l·ªãch s·ª≠")
            st.dataframe(filtered_data, use_container_width=True, hide_index=True)


        # Kh·ªüi t·∫°o bi·∫øn tr·∫°ng th√°i ƒë·ªÉ nh·ªõ n√∫t n√†o ƒë√£ ƒë∆∞·ª£c b·∫•m
        if "run_prophet" not in st.session_state:
            st.session_state.run_prophet = False

        if "run_lstm_linear" not in st.session_state:
            st.session_state.run_lstm_linear = False


        # PH·∫¶N 3 ‚Äì PROPHET
        st.write("---")
        st.header("3. Ph√¢n t√≠ch & D·ª± b√°o xu h∆∞·ªõng c·ªï phi·∫øu b·∫±ng m√¥ h√¨nh Prophet")
        st.subheader("Ch·ªçn s·ªë ng√†y d·ª± ƒëo√°n v·ªõi Prophet")

        period_prophet = st.number_input(
            "S·ªë ng√†y d·ª± ƒëo√°n (Prophet):",
            min_value=1,
            max_value=365,
            value=10,
            step=1,
            key="pred_days_prophet"
        )

        import os

        ticker = st.session_state.selected_stock
        BASE_DIR = os.path.dirname(os.path.abspath(__file__))  # th∆∞ m·ª•c ch·ª©a file hi·ªán t·∫°i

        model_path = os.path.join(BASE_DIR, "prophet_models", f"prophet_{ticker}.pkl")

        if os.path.exists(model_path):
            predictor1 = ProphetPredictor(model_path=model_path)
        else:
            st.error(f"File m√¥ h√¨nh cho {ticker} kh√¥ng t·ªìn t·∫°i t·∫°i ƒë∆∞·ªùng d·∫´n:\n{model_path}")
            predictor1 = None  # ho·∫∑c x·ª≠ l√Ω theo c√°ch kh√°c t√πy app

        # N√∫t Prophet
        if st.button(f"Ch·∫°y d·ª± ƒëo√°n v·ªõi Prophet cho {period_prophet} ng√†y", key="run_prediction_prophet"):
            st.session_state.run_prophet = True

        # N·∫øu ƒë√£ b·∫•m th√¨ ch·∫°y
        if st.session_state.run_prophet:
            # Sau khi d·ª± ƒëo√°n xong:
            prediction_df = predictor1.predict(historical_data, period=period_prophet)

            # G·ªçi c√°c bi·ªÉu ƒë·ªì
            predictor1.plot_prophet_forecast_percent_change(prediction_df, ticker)
            predictor1.plot_full_forecast(period_prophet, ticker)



        # PH·∫¶N 4 ‚Äì LSTM & LINEAR
        st.write("---")
        st.header("4. Thi·∫øt l·∫≠p v√† Ch·∫°y D·ª± ƒëo√°n")

        period = st.number_input(
            "S·ªë ng√†y d·ª± ƒëo√°n:",
            min_value=1,
            max_value=365,
            value=10,
            step=1,
            key="pred_days_lstm_linear"  # ƒê·ªïi key kh√°c
        )

        st.subheader("Ch·ªçn m√¥ h√¨nh d·ª± ƒëo√°n ƒë·ªÉ s·ª≠ d·ª•ng. B·∫°n c√≥ th·ªÉ ch·ªçn nhi·ªÅu m√¥ h√¨nh c√πng l√∫c.")
        model_options = ("LSTM", "Linear Regression")
        cols = st.columns(len(model_options))
        selected_models = []

        for i, model_name in enumerate(model_options):
            if cols[i].checkbox(model_name, key=f"model_{model_name}"):
                selected_models.append(model_name)

                # N√∫t LSTM / Linear
        if st.button(f"Ch·∫°y d·ª± ƒëo√°n v·ªõi c√°c m√¥ h√¨nh cho {period} ng√†y", key="run_prediction_lstm_linear"):
            if not selected_models:
                st.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt m√¥ h√¨nh ƒë·ªÉ ch·∫°y d·ª± ƒëo√°n.")
            else:
                models_str = ", ".join(selected_models)
                with st.spinner(f"ƒêang d·ª± ƒëo√°n b·∫±ng m√¥ h√¨nh: {models_str}..."):
                    prediction_results = {}
                    for model_name in selected_models:
                        if model_name == "LSTM":
                            t = st.session_state.selected_stock
                            BASE_DIR = os.path.dirname(os.path.abspath(__file__))  # th∆∞ m·ª•c ch·ª©a file main.py

                            # D√πng os.path.join thay v√¨ vi·∫øt tay d·∫•u \ ho·∫∑c /
                            model_path = os.path.join(BASE_DIR, "model_lstm", f"lstm_{t}.h5")

                            if os.path.exists(model_path):
                                predictor = Predict(model_path=model_path)
                                prediction_results[model_name] = predictor.predict(historical_data, period)
                            else:
                                st.error(f"File m√¥ h√¨nh LSTM cho {t} kh√¥ng t·ªìn t·∫°i t·∫°i:\n{model_path}")
                                # X·ª≠ l√Ω khi file kh√¥ng t·ªìn t·∫°i, v√≠ d·ª• b·ªè qua ho·∫∑c d√πng m√¥ h√¨nh m·∫∑c ƒë·ªãnh

                        elif model_name == "Linear Regression":
                            linear_model = LinearStockPredictor(T=60, T_prime=period)
                            linear_model.train(historical_data)
                            prediction_results[model_name] = linear_model.predict_future()

                    st.session_state.prediction_results = prediction_results
                st.success(f"ƒê√£ ch·∫°y d·ª± ƒëo√°n v·ªõi m√¥ h√¨nh: {models_str}")

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì d·ª± ƒëo√°n n·∫øu c√≥ k·∫øt qu·∫£
                if st.session_state.prediction_results:
                    st.subheader("K·∫øt qu·∫£ D·ª± ƒëo√°n")
                    pred_time_ranges = ["1 ng√†y", "5 ng√†y", "1 th√°ng", "6 th√°ng", "T·ª´ ƒë·∫ßu nƒÉm", "1 nƒÉm", "5 nƒÉm", "T·ªêI ƒêA"]
                    st.radio(
                        "Ph√≥ng to k·∫øt qu·∫£ d·ª± ƒëo√°n",
                        options=pred_time_ranges,
                        key='pred_time_ranges',
                        index = 2, # M·∫∑c ƒë·ªãnh l√† "1 th√°ng",
                        horizontal=True,
                        label_visibility="collapsed"
                    )
                    plot_prediction_results(historical_data, st.session_state.prediction_results,
                                            st.session_state.pred_time_ranges)
                    

                
        else:
            st.info("Vui l√≤ng ch·ªçn m·ªôt m√£ c·ªï phi·∫øu ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")

        pass

with tab2:
    # Giao di·ªán chatbot
    st.header("Tr·ª£ l√Ω AI d·ª± b√°o xu h∆∞·ªõng c·ªï phi·∫øu")
    st.markdown("H·ªèi t√¥i v·ªÅ xu h∆∞·ªõng c·ªï phi·∫øu, ch·ªâ b√°o k·ªπ thu·∫≠t, ho·∫∑c c√°ch s·ª≠ d·ª•ng h·ªá th·ªëng d·ª± b√°o.")
    # G·∫Øn webchat v√†o giao di·ªán
    botpress_iframe_url = "https://cdn.botpress.cloud/webchat/v3.1/shareable.html?configUrl=https://files.bpcontent.cloud/2025/07/17/04/20250717042032-HACMEXE8.json"
    st.components.v1.iframe(botpress_iframe_url, height=600, scrolling=True)

